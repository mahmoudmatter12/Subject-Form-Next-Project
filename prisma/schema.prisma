// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id               String           @id @default(uuid())
  clirkId          String           @unique
  studentId        String           @unique
  fname            String
  lname            String?
  fullName         String?
  arabicName       String?
  email            String           @unique
  phoneNumber      String?
  imgUrl           String?
  Level            level?
  Program          program?
  cgpa             String?
  CGPA_Letter      String?
  academicGuide    academicGuide?
  subjects         Subject[]        @relation("StudentSubjects")
  submissions      Submission[]
  role             Role             @default(STUDENT)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  onboarded        Boolean          @default(false)
  enrolledSubjects UserEnrollment[]

  @@index([clirkId, email, studentId])
  @@map("students")
}

model CGPA {
  id          String  @id @default(uuid())
  studentId   String? @unique
  cgpa        String?
  CGPA_Letter String?

  @@map("cgpa")
}

model Submission {
  id                String              @id @default(uuid())
  studentId         String?
  student           Student?            @relation(fields: [studentId], references: [id])
  status            SubmissionStatus    @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SubjectSubmission SubjectSubmission[]
  subjects          Subject[]

  @@map("submissions")
}

model Subject {
  id                String              @id @default(uuid())
  subjectCode       String              @unique
  name              String
  isOpen            Boolean             @default(false)
  creditHours       Int                 @default(3)
  prerequisites     String[]
  students          Student[]           @relation("StudentSubjects")
  createdAt         DateTime            @default(now())
  UserEnrollment    UserEnrollment[]
  SubjectSubmission SubjectSubmission[]
  Submission        Submission?         @relation(fields: [submissionId], references: [id])
  submissionId      String?

  @@map("subjects")
}

model UserEnrollment {
  studentId String
  subjectId String
  status    Status   @default(NOT_ENROLLED)
  student   Student? @relation(fields: [studentId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])

  @@id([studentId, subjectId])
  @@map("user_enrollments")
}

model SubjectSubmission {
  submissionId String
  subjectId    String
  submission   Submission @relation(fields: [submissionId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([submissionId, subjectId])
  @@map("subject_submissions")
}

enum Role {
  STUDENT
  ADMIN
}

enum Status {
  PASSED
  FAILED
  NOT_ENROLLED
  ENROLLED
}

enum academicGuide {
  DR_HELAL
  DR_SALWA
  DR_SAFAA
  DR_SOHA
  DR_SARA
}

enum level {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum program {
  Data_Science
  Robotics
  Muiltimedia
}

enum SubmissionStatus {
  ACCSEPTED
  REJECTED
  PENDING
}
