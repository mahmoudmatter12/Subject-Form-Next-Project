// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Models (updated with quiz relations)
model Student {
  id                String             @id @default(uuid())
  clirkId           String             @unique
  studentId         String             @unique
  fname             String
  lname             String?
  fullName          String?
  arabicName        String?
  email             String             @unique
  phoneNumber       String?
  imgUrl            String?
  Level             level?
  Program           program?
  cgpa              String?
  CGPA_Letter       String?
  academicGuide     academicGuide?
  role              Role               @default(STUDENT)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  onboarded         Boolean            @default(false)
  LinkedInLink      String?
  subjects          Subject[]          @relation("StudentSubjects")
  enrolledSubjects  UserEnrollment[]
  submissions       Submission[]
  quizRegistrations QuizRegistration[]
  quizAttempts      QuizAttempt[]
  Quiz              Quiz[]             @relation("RegisteredStudentsRelation")
  QuizCreation      Quiz[]             @relation("CreatedByRelation")

  @@index([clirkId, email, studentId])
  @@map("students")
}

model Quiz {
  id            String             @id @default(uuid())
  title         String             @unique
  description   String
  createdById   String
  isPublished   Boolean            @default(false)
  subjectId     String?
  timeLimit     Int?               @default(30)
  maxAttempts   Int?               @default(0) // 0 means unlimited
  attemptsNum   Int?               @default(0) // Tracks how many attempts a student has made
  passingScore  Int?               @default(50)
  dueDate       DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdBy     Student            @relation("CreatedByRelation", fields: [createdById], references: [id])
  subject       Subject?           @relation(fields: [subjectId], references: [id])
  questions     Question[] // One-to-many (One quiz has many questions)
  students      Student[]          @relation("RegisteredStudentsRelation") // Many-to-many (Many students can register for many quizzes)
  attempts      QuizAttempt[]
  registrations QuizRegistration[]

  @@map("quizzes")
}

model Question {
  id            String       @id @default(uuid())
  text          String
  type          QuestionType @default(MULTIPLE_CHOICE)
  options       String[] // For MCQ: ["Option 1", "Option 2"]
  correctAnswer Int? // Index of correct option (0-based)
  textAnswer    String? // For short-answer questions
  points        Int          @default(1)
  quizId        String // Foreign key to Quiz
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuizAnswer[] // One-to-many (One question has many answers across submissions)
  createdAt     DateTime     @default(now())

  @@map("questions")
}

model QuizAnswer {
  id             String      @id @default(uuid())
  quizAttemptId  String
  quizAttempt    QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question    @relation(fields: [questionId], references: [id])
  selectedOption Int?
  textResponse   String?
  isCorrect      Boolean     @default(false)

  @@map("quiz_answers")
}

model QuizAttempt {
  id          String       @id @default(uuid())
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id])
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id])
  score       Int // percentage score
  timeSpent   Int // in seconds
  isPassed    Boolean      @default(false)
  completedAt DateTime     @default(now())
  answers     QuizAnswer[]

  @@map("quiz_attempts")
}

model QuizRegistration {
  id           String   @id @default(uuid())
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id])
  quizId       String
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  registeredAt DateTime @default(now())

  @@unique([studentId, quizId])
  @@map("quiz_registrations")
}




model CGPA {
  id          String  @id @default(uuid())
  studentId   String? @unique
  cgpa        String?
  CGPA_Letter String?

  @@map("cgpa")
}

model Submission {
  id        String           @id @default(uuid())
  studentId String?
  student   Student?         @relation(fields: [studentId], references: [id])
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  subjects  Subject[]

  @@map("submissions")
}

model Subject {
  id             String           @id @default(uuid())
  subjectCode    String           @unique
  name           String
  isOpen         Boolean          @default(false)
  creditHours    Int              @default(3)
  prerequisites  String[]
  students       Student[]        @relation("StudentSubjects")
  createdAt      DateTime         @default(now())
  UserEnrollment UserEnrollment[]
  Submission     Submission?      @relation(fields: [submissionId], references: [id])
  submissionId   String?
  quizzes        Quiz[]

  @@map("subjects")
}

model UserEnrollment {
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  status    String   @default("ENROLLED")
  @@id([studentId, subjectId])
  @@map("user_enrollments")
}

// Enums (updated with quiz-related options)
enum Role {
  STUDENT
  ADMIN
  INSTRUCTOR // Added for quiz creators
}

enum Status {
  PASSED
  FAILED
  NOT_ENROLLED
  ENROLLED
}

enum academicGuide {
  DR_HELAL
  DR_SALWA
  DR_SAFAA
  DR_SOHA
  DR_SARA
}

enum level {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum program {
  Data_Science
  Robotics
  Muiltimedia
}

enum SubmissionStatus {
  ACCSEPTED
  REJECTED
  PENDING
}

// New enums for quizzes
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
