// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Models (updated with quiz relations)
model Student {
  id                String           @id @default(uuid())
  clirkId           String           @unique
  studentId         String           @unique
  fname             String
  lname             String?
  fullName          String?
  arabicName        String?
  email             String           @unique
  phoneNumber       String?
  imgUrl            String?
  Level             level?
  Program           program?
  cgpa              String?
  CGPA_Letter       String?
  academicGuide     academicGuide?
  role              Role             @default(STUDENT)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  onboarded         Boolean          @default(false)
  LinkedInLink      String?
  subjects          Subject[]        @relation("StudentSubjects")
  enrolledSubjects  UserEnrollment[]
  submissions       Submission[]
  quizSubmissions   QuizSubmission[]
  createdQuizzes    Quiz[]           @relation("CreatedByRelation")
  registeredQuizzes Quiz[]           @relation("RegisteredStudentsRelation")

  @@index([clirkId, email, studentId])
  @@map("students")
}

model Quiz {
  id           String           @id @default(uuid())
  title        String           @unique
  description  String
  createdById  String
  isPublished  Boolean          @default(false)
  subjectId    String?
  timeLimit    Int?             @default(30)
  maxAttempts  Int?             @default(0) // 0 means unlimited
  attempts     Int?             @default(0) // Tracks how many attempts a student has made
  passingScore Int?             @default(50)
  dueDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdBy    Student          @relation("CreatedByRelation", fields: [createdById], references: [id])
  subject      Subject?         @relation(fields: [subjectId], references: [id])
  questions    Question[]       // One-to-many (One quiz has many questions)
  submissions  QuizSubmission[] // One-to-many (One quiz has many submissions)
  students     Student[]        @relation("RegisteredStudentsRelation") // Many-to-many (Many students can register for many quizzes)
  
  @@map("quizzes")
}

model Question {
  id            String       @id @default(uuid())
  text          String
  type          QuestionType @default(MULTIPLE_CHOICE)
  options       String[] // For MCQ: ["Option 1", "Option 2"]
  correctAnswer Int? // Index of correct option (0-based)
  textAnswer    String? // For short-answer questions
  points        Int          @default(1)
  quizId        String // Foreign key to Quiz
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       Answer[] // One-to-many (One question has many answers across submissions)
  createdAt     DateTime     @default(now())

  @@map("questions")
}

model QuizSubmission {
  id          String    @id @default(uuid())
  quizId      String
  studentId   String
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  answers     Answer[] // All answers for this submission
  score       Float // Calculated score (sum of correct answers' points)
  isPassed    Boolean // Computed from passingScore
  feedback    String? // Instructor feedback
  submittedAt DateTime  @default(now())
  gradedAt    DateTime? // When instructor reviewed

  @@map("quiz_submissions")
}

model Answer {
  id                String         @id @default(uuid())
  questionId        String
  question          Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption    Int? // For MCQ: index of chosen option
  textResponse      String? // For short-answer questions
  tureFalseResponse Boolean? // For true/false questions
  isCorrect         Boolean
  quizSubmission    QuizSubmission @relation(fields: [quizSubmissionId], references: [id])
  quizSubmissionId  String

  @@map("answers")
}

model CGPA {
  id          String  @id @default(uuid())
  studentId   String? @unique
  cgpa        String?
  CGPA_Letter String?

  @@map("cgpa")
}

model Submission {
  id        String           @id @default(uuid())
  studentId String?
  student   Student?         @relation(fields: [studentId], references: [id])
  status    SubmissionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  subjects  Subject[]

  @@map("submissions")
}

model Subject {
  id             String           @id @default(uuid())
  subjectCode    String           @unique
  name           String
  isOpen         Boolean          @default(false)
  creditHours    Int              @default(3)
  prerequisites  String[]
  students       Student[]        @relation("StudentSubjects")
  createdAt      DateTime         @default(now())
  UserEnrollment UserEnrollment[]
  Submission     Submission?      @relation(fields: [submissionId], references: [id])
  submissionId   String?
  quizzes        Quiz[]

  @@map("subjects")
}

model UserEnrollment {
  studentId String
  subjectId String
  status    Status   @default(NOT_ENROLLED)
  student   Student? @relation(fields: [studentId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])

  @@id([studentId, subjectId])
  @@map("user_enrollments")
}

// Enums (updated with quiz-related options)
enum Role {
  STUDENT
  ADMIN
  INSTRUCTOR // Added for quiz creators
}

enum Status {
  PASSED
  FAILED
  NOT_ENROLLED
  ENROLLED
}

enum academicGuide {
  DR_HELAL
  DR_SALWA
  DR_SAFAA
  DR_SOHA
  DR_SARA
}

enum level {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
}

enum program {
  Data_Science
  Robotics
  Muiltimedia
}

enum SubmissionStatus {
  ACCSEPTED
  REJECTED
  PENDING
}

// New enums for quizzes
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
